{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\nvar _jsxFileName = \"/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/pages/post.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\n\nconst Post = ({\n  id,\n  comments\n}) => {\n  const allComments = comments.map(comment => /*#__PURE__*/_createElement(Comment, _objectSpread(_objectSpread({}, comment), {}, {\n    key: comment.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 5\n    }\n  })));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Comments for post #\", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), allComments]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\nconst Comment = ({\n  email,\n  body\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 6\n  }, this);\n}; // ===== getting the id from the query string using getInitialProps =====\n// getInitialProps receives and object (it can be called anything)\n// what's standard, though, is to grab the pieces you need\n\n\nPost.getInitialProps = async ({\n  query\n}) => {\n  const response = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${query.id}`);\n  const {\n    data\n  } = response; // we now have access to \"id\" and comments inside of props\n\n  return {\n    id: query.id,\n    comments: data\n  };\n};\n\nexport default Post; // ===== retrieving ID using withRouter =====\n// import { withRouter } from \"next/router\";\n// const Post = (props) => {\n//   return (\n//     <h1>You're looking at post #{props.router.query.id}</h1>\n//   );\n// }\n// export default withRouter(Post);","map":{"version":3,"sources":["/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/pages/post.js"],"names":["axios","Post","id","comments","allComments","map","comment","Comment","email","body","getInitialProps","query","response","get","data"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAsB;AACjC,QAAMC,WAAW,GAAGD,QAAQ,CAACE,GAAT,CAAaC,OAAO,iBACtC,eAAC,OAAD,kCAAaA,OAAb;AAAsB,IAAA,GAAG,EAAEA,OAAO,CAACJ,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADkB,CAApB;AAIA,sBACE;AAAA,4BACE;AAAA,wCAAwBA,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,WAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAZD;;AAcA,MAAMG,OAAO,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAmB;AAChC,sBACE;AAAA,4BACE;AAAA,gBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMF,CAPD,C,CASA;AACA;AACA;;;AACAR,IAAI,CAACS,eAAL,GAAuB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC1C,QAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAW,wDAAuDF,KAAK,CAACT,EAAG,EAA3E,CAAvB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAWF,QAAjB,CAF0C,CAI1C;;AACA,SAAO;AAACV,IAAAA,EAAE,EAAES,KAAK,CAACT,EAAX;AAAeC,IAAAA,QAAQ,EAAEW;AAAzB,GAAP;AACD,CAND;;AAQA,eAAeb,IAAf,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import axios from \"axios\";\n\nconst Post = ({ id, comments }) => {\n  const allComments = comments.map(comment => (\n    <Comment {...comment} key={comment.id}/>\n  ));\n\n  return (\n    <div>\n      <h1>Comments for post #{id}</h1>\n      {allComments}\n    </div>\n    \n  );\n}\n\nconst Comment = ({email, body}) => {\n   return (\n     <div>\n       <h5>{email}</h5>\n       <p>{body}</p>\n     </div>\n   )\n}\n\n// ===== getting the id from the query string using getInitialProps =====\n// getInitialProps receives and object (it can be called anything)\n// what's standard, though, is to grab the pieces you need\nPost.getInitialProps = async ({ query }) => {\n  const response = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${query.id}`);\n  const { data } = response;\n\n  // we now have access to \"id\" and comments inside of props\n  return {id: query.id, comments: data};\n}\n\nexport default Post;\n\n\n// ===== retrieving ID using withRouter =====\n// import { withRouter } from \"next/router\";\n\n// const Post = (props) => {\n//   return (\n//     <h1>You're looking at post #{props.router.query.id}</h1>\n//   );\n// }\n\n// export default withRouter(Post);"]},"metadata":{},"sourceType":"module"}