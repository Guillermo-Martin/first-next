{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/pages/post.js\";\nimport axios from \"axios\";\n\nconst Post = ({\n  id,\n  comments\n}) => {\n  const allComments = comments.map(comment => /*#__PURE__*/_jsxDEV(\"p\", {\n    children: comment.email\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Comments for post #\", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), allComments]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}; // ===== getting the id from the query string using getInitialProps =====\n// getInitialProps receives and object (it can be called anything)\n// what's standard, though, is to grab the pieces you need\n\n\nPost.getInitialProps = async ({\n  query\n}) => {\n  const response = await axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=1\");\n  const {\n    data\n  } = response; // we now have access to \"id\" and comments inside of props\n\n  return {\n    id: query.id,\n    comments: data\n  };\n};\n\nexport default Post; // ===== retrieving ID using withRouter =====\n// import { withRouter } from \"next/router\";\n// const Post = (props) => {\n//   return (\n//     <h1>You're looking at post #{props.router.query.id}</h1>\n//   );\n// }\n// export default withRouter(Post);","map":{"version":3,"sources":["/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/pages/post.js"],"names":["axios","Post","id","comments","allComments","map","comment","email","getInitialProps","query","response","get","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA;AAAN,CAAD,KAAsB;AACjC,QAAMC,WAAW,GAAGD,QAAQ,CAACE,GAAT,CAAaC,OAAO,iBACtC;AAAA,cAAIA,OAAO,CAACC;AAAZ;AAAA;AAAA;AAAA;AAAA,UADkB,CAApB;AAIA,sBACE;AAAA,4BACE;AAAA,wCAAwBL,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,WAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAZD,C,CAcA;AACA;AACA;;;AACAH,IAAI,CAACO,eAAL,GAAuB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC1C,QAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,wDAAV,CAAvB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWF,QAAjB,CAF0C,CAI1C;;AACA,SAAO;AAACR,IAAAA,EAAE,EAAEO,KAAK,CAACP,EAAX;AAAeC,IAAAA,QAAQ,EAAES;AAAzB,GAAP;AAED,CAPD;;AAUA,eAAeX,IAAf,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import axios from \"axios\";\n\nconst Post = ({ id, comments }) => {\n  const allComments = comments.map(comment => (\n    <p>{comment.email}</p>\n  ));\n\n  return (\n    <div>\n      <h1>Comments for post #{id}</h1>\n      {allComments}\n    </div>\n    \n  );\n}\n\n// ===== getting the id from the query string using getInitialProps =====\n// getInitialProps receives and object (it can be called anything)\n// what's standard, though, is to grab the pieces you need\nPost.getInitialProps = async ({ query }) => {\n  const response = await axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=1\");\n  const { data } = response;\n\n  // we now have access to \"id\" and comments inside of props\n  return {id: query.id, comments: data};\n  \n}\n\n\nexport default Post;\n\n\n// ===== retrieving ID using withRouter =====\n// import { withRouter } from \"next/router\";\n\n// const Post = (props) => {\n//   return (\n//     <h1>You're looking at post #{props.router.query.id}</h1>\n//   );\n// }\n\n// export default withRouter(Post);"]},"metadata":{},"sourceType":"module"}