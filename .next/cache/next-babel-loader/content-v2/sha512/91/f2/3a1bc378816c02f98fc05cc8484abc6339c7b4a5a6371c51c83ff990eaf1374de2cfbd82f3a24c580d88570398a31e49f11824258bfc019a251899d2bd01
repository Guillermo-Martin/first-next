{"ast":null,"code":"import _regeneratorRuntime from \"/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/pages/post.js\",\n    _this = this;\n\nimport axios from \"axios\";\n\nvar Post = function Post(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, _this);\n}; // ===== getting the id from the query string using getInitialProps =====\n// getInitialProps receives and object (it can be called anything)\n// what's standard, though, is to grab the pieces you need\n\n\n_c = Post;\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var query, response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref.query;\n            _context.next = 3;\n            return axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=1\");\n\n          case 3:\n            response = _context.sent;\n            data = response.data;\n            console.log(data[0]); // we now have access to \"id\" and comments inside of props\n\n            return _context.abrupt(\"return\", {\n              id: query.id,\n              comments: data\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default Post; // ===== retrieving ID using withRouter =====\n// import { withRouter } from \"next/router\";\n// const Post = (props) => {\n//   return (\n//     <h1>You're looking at post #{props.router.query.id}</h1>\n//   );\n// }\n// export default withRouter(Post);\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/pages/post.js"],"names":["axios","Post","props","getInitialProps","query","get","response","data","console","log","id","comments"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD,EAAW;AACtB,sBACE;AAAA;AAAA;AAAA;AAAA,WADF;AAMD,CAPD,C,CASA;AACA;AACA;;;KAXMD,I;;AAYNA,IAAI,CAACE,eAAL;AAAA,uEAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,QAASA,KAAT;AAAA;AAAA,mBACEJ,KAAK,CAACK,GAAN,CAAU,wDAAV,CADF;;AAAA;AACfC,YAAAA,QADe;AAEbC,YAAAA,IAFa,GAEJD,QAFI,CAEbC,IAFa;AAGrBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAAC,CAAD,CAAhB,EAHqB,CAKrB;;AALqB,6CAMd;AAACG,cAAAA,EAAE,EAAEN,KAAK,CAACM,EAAX;AAAeC,cAAAA,QAAQ,EAAEJ;AAAzB,aANc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAWA,eAAeN,IAAf,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import axios from \"axios\";\n\nconst Post = (props) => {\n  return (\n    <div>\n      \n    </div>\n    \n  );\n}\n\n// ===== getting the id from the query string using getInitialProps =====\n// getInitialProps receives and object (it can be called anything)\n// what's standard, though, is to grab the pieces you need\nPost.getInitialProps = async ({ query }) => {\n  const response = await axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=1\");\n  const { data } = response;\n  console.log(data[0]);\n\n  // we now have access to \"id\" and comments inside of props\n  return {id: query.id, comments: data};\n  \n}\n\n\nexport default Post;\n\n\n// ===== retrieving ID using withRouter =====\n// import { withRouter } from \"next/router\";\n\n// const Post = (props) => {\n//   return (\n//     <h1>You're looking at post #{props.router.query.id}</h1>\n//   );\n// }\n\n// export default withRouter(Post);"]},"metadata":{},"sourceType":"module"}