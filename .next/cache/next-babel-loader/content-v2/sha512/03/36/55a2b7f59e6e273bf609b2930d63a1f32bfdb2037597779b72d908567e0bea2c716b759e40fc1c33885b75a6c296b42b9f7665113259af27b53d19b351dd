{"ast":null,"code":"import _regeneratorRuntime from \"/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createElement as _createElement } from \"react\";\n\nvar _jsxFileName = \"/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/pages/post.js\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"axios\";\n\nvar Post = function Post(_ref) {\n  var id = _ref.id,\n      comments = _ref.comments;\n  var allComments = comments.map(function (comment) {\n    return /*#__PURE__*/_createElement(Comment, _objectSpread(_objectSpread({}, comment), {}, {\n      key: comment.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 5,\n        columnNumber: 5\n      }\n    }));\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Comments for post #\", id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, _this), allComments]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, _this);\n};\n\n_c = Post;\n\nvar Comment = function Comment(_ref2) {\n  var email = _ref2.email,\n      body = _ref2.body;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      children: email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 8\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 8\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 6\n  }, _this);\n}; // ===== getting the id from the query string using getInitialProps =====\n// getInitialProps receives and object (it can be called anything)\n// what's standard, though, is to grab the pieces you need\n\n\n_c2 = Comment;\n\nPost.getInitialProps = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {\n    var query, response, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            query = _ref3.query;\n            _context.next = 3;\n            return axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=1\");\n\n          case 3:\n            response = _context.sent;\n            data = response.data; // we now have access to \"id\" and comments inside of props\n\n            return _context.abrupt(\"return\", {\n              id: query.id,\n              comments: data\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexport default Post; // ===== retrieving ID using withRouter =====\n// import { withRouter } from \"next/router\";\n// const Post = (props) => {\n//   return (\n//     <h1>You're looking at post #{props.router.query.id}</h1>\n//   );\n// }\n// export default withRouter(Post);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Post\");\n$RefreshReg$(_c2, \"Comment\");","map":{"version":3,"sources":["/Users/guillermomartin/Coding/Udemy/The Modern React Bootcamp/react-nextjs/first-next/pages/post.js"],"names":["axios","Post","id","comments","allComments","map","comment","Comment","email","body","getInitialProps","query","get","response","data"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAsB;AAAA,MAAnBC,EAAmB,QAAnBA,EAAmB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACjC,MAAMC,WAAW,GAAGD,QAAQ,CAACE,GAAT,CAAa,UAAAC,OAAO;AAAA,wBACtC,eAAC,OAAD,kCAAaA,OAAb;AAAsB,MAAA,GAAG,EAAEA,OAAO,CAACJ,EAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADsC;AAAA,GAApB,CAApB;AAIA,sBACE;AAAA,4BACE;AAAA,wCAAwBA,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEGE,WAFH;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CAZD;;KAAMH,I;;AAcN,IAAMM,OAAO,GAAG,SAAVA,OAAU,QAAmB;AAAA,MAAjBC,KAAiB,SAAjBA,KAAiB;AAAA,MAAVC,IAAU,SAAVA,IAAU;AAChC,sBACE;AAAA,4BACE;AAAA,gBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA,gBAAIC;AAAJ;AAAA;AAAA;AAAA;AAAA,aAFF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAMF,CAPD,C,CASA;AACA;AACA;;;MAXMF,O;;AAYNN,IAAI,CAACS,eAAL;AAAA,uEAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,KAAT,SAASA,KAAT;AAAA;AAAA,mBACEX,KAAK,CAACY,GAAN,CAAU,wDAAV,CADF;;AAAA;AACfC,YAAAA,QADe;AAEbC,YAAAA,IAFa,GAEJD,QAFI,CAEbC,IAFa,EAIrB;;AAJqB,6CAKd;AAACZ,cAAAA,EAAE,EAAES,KAAK,CAACT,EAAX;AAAeC,cAAAA,QAAQ,EAAEW;AAAzB,aALc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAUA,eAAeb,IAAf,C,CAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import axios from \"axios\";\n\nconst Post = ({ id, comments }) => {\n  const allComments = comments.map(comment => (\n    <Comment {...comment} key={comment.id}/>\n  ));\n\n  return (\n    <div>\n      <h1>Comments for post #{id}</h1>\n      {allComments}\n    </div>\n    \n  );\n}\n\nconst Comment = ({email, body}) => {\n   return (\n     <div>\n       <h5>{email}</h5>\n       <p>{body}</p>\n     </div>\n   )\n}\n\n// ===== getting the id from the query string using getInitialProps =====\n// getInitialProps receives and object (it can be called anything)\n// what's standard, though, is to grab the pieces you need\nPost.getInitialProps = async ({ query }) => {\n  const response = await axios.get(\"https://jsonplaceholder.typicode.com/comments?postId=1\");\n  const { data } = response;\n\n  // we now have access to \"id\" and comments inside of props\n  return {id: query.id, comments: data};\n  \n}\n\n\nexport default Post;\n\n\n// ===== retrieving ID using withRouter =====\n// import { withRouter } from \"next/router\";\n\n// const Post = (props) => {\n//   return (\n//     <h1>You're looking at post #{props.router.query.id}</h1>\n//   );\n// }\n\n// export default withRouter(Post);"]},"metadata":{},"sourceType":"module"}